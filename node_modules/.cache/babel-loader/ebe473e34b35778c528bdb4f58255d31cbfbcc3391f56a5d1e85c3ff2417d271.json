{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmeer\\\\Downloads\\\\ai\\\\eashaop\\\\src\\\\Components\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! I am eAsha Health Care. How can I assist you today?\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [quickOptions, setQuickOptions] = useState([\"Doctor\", \"Medicine\", \"Appointment\"]);\n  const keywordSuggestions = {\n    fever: [\"Consult Doctor\", \"Fever Medicine\"],\n    headache: [\"Pain Relief\", \"Consult Doctor\"],\n    cough: [\"Cough Syrup\", \"Consult Doctor\"],\n    diabetes: [\"Sugar Test\", \"Diabetes Medicine\"]\n  };\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    let userMessage = input.trim().toLowerCase();\n\n    // Extract relevant keywords from user message\n    let suggestedOptions = [];\n    Object.keys(keywordSuggestions).forEach(keyword => {\n      if (userMessage.includes(keyword)) {\n        suggestedOptions = keywordSuggestions[keyword];\n      }\n    });\n\n    // Update quick options based on detected keywords\n    if (suggestedOptions.length > 0) {\n      setQuickOptions(suggestedOptions);\n    } else {\n      setQuickOptions([\"Doctor\", \"Medicine\", \"Appointment\"]);\n    }\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: userMessage\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    setIsTyping(true);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/chatbot\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMessage\n        })\n      });\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      const data = await response.json();\n      setMessages([...newMessages, {\n        sender: \"bot\",\n        text: data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error fetching chatbot response:\", error);\n      setMessages([...newMessages, {\n        sender: \"bot\",\n        text: \"Error: Unable to reach chatbot.\"\n      }]);\n    }\n    setIsTyping(false);\n  };\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n  const sendQuickOption = option => {\n    setInput(option);\n    sendMessage();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-icon\",\n      onClick: () => setIsOpen(!isOpen),\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [\"eAsha Health Assistant \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsOpen(false),\n          children: \"\\u2716\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 73\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.sender}-message`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.sender === \"user\" ? \"You\" : \"Bot\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this), \" \", msg.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message bot-message\",\n          children: \"Bot: Typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-options\",\n        children: quickOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sendQuickOption(option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Ask me about health...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(Chatbot, \"+tvH4xFOg7WBcHDqT1S+IQLibJQ=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","messages","setMessages","sender","text","input","setInput","isTyping","setIsTyping","isOpen","setIsOpen","quickOptions","setQuickOptions","keywordSuggestions","fever","headache","cough","diabetes","sendMessage","trim","userMessage","toLowerCase","suggestedOptions","Object","keys","forEach","keyword","includes","length","newMessages","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","status","data","json","error","console","handleKeyPress","event","key","sendQuickOption","option","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","onKeyPress","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/gmeer/Downloads/ai/eashaop/src/Components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chatbot.css\";\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([\r\n        { sender: \"bot\", text: \"Hello! I am eAsha Health Care. How can I assist you today?\" }\r\n    ]);\r\n    const [input, setInput] = useState(\"\");\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [quickOptions, setQuickOptions] = useState([\"Doctor\", \"Medicine\", \"Appointment\"]);\r\n\r\n    const keywordSuggestions = {\r\n        fever: [\"Consult Doctor\", \"Fever Medicine\"],\r\n        headache: [\"Pain Relief\", \"Consult Doctor\"],\r\n        cough: [\"Cough Syrup\", \"Consult Doctor\"],\r\n        diabetes: [\"Sugar Test\", \"Diabetes Medicine\"],\r\n    };\r\n\r\n    const sendMessage = async () => {\r\n        if (!input.trim()) return;\r\n        let userMessage = input.trim().toLowerCase();\r\n\r\n        // Extract relevant keywords from user message\r\n        let suggestedOptions = [];\r\n        Object.keys(keywordSuggestions).forEach((keyword) => {\r\n            if (userMessage.includes(keyword)) {\r\n                suggestedOptions = keywordSuggestions[keyword];\r\n            }\r\n        });\r\n\r\n        // Update quick options based on detected keywords\r\n        if (suggestedOptions.length > 0) {\r\n            setQuickOptions(suggestedOptions);\r\n        } else {\r\n            setQuickOptions([\"Doctor\", \"Medicine\", \"Appointment\"]);\r\n        }\r\n\r\n        const newMessages = [...messages, { sender: \"user\", text: userMessage }];\r\n        setMessages(newMessages);\r\n        setInput(\"\");\r\n        setIsTyping(true);\r\n\r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:5000/chatbot\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ message: userMessage })\r\n            });\r\n            \r\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\r\n            \r\n            const data = await response.json();\r\n            setMessages([...newMessages, { sender: \"bot\", text: data.response }]);\r\n        } catch (error) {\r\n            console.error(\"Error fetching chatbot response:\", error);\r\n            setMessages([...newMessages, { sender: \"bot\", text: \"Error: Unable to reach chatbot.\" }]);\r\n        }\r\n        setIsTyping(false);\r\n    };\r\n\r\n    const handleKeyPress = (event) => {\r\n        if (event.key === \"Enter\") {\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    const sendQuickOption = (option) => {\r\n        setInput(option);\r\n        sendMessage();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"chatbot-icon\" onClick={() => setIsOpen(!isOpen)}>💬</div>\r\n\r\n            {isOpen && (\r\n                <div className=\"chatbot-container\">\r\n                    <div className=\"chat-header\">eAsha Health Assistant <button onClick={() => setIsOpen(false)}>✖</button></div>\r\n                    <div className=\"chat-body\">\r\n                        {messages.map((msg, index) => (\r\n                            <div key={index} className={`chat-message ${msg.sender}-message`}>\r\n                                <strong>{msg.sender === \"user\" ? \"You\" : \"Bot\"}:</strong> {msg.text}\r\n                            </div>\r\n                        ))}\r\n                        {isTyping && <div className=\"chat-message bot-message\">Bot: Typing...</div>}\r\n                    </div>\r\n                    <div className=\"quick-options\">\r\n                        {quickOptions.map((option, index) => (\r\n                            <button key={index} onClick={() => sendQuickOption(option)}>\r\n                                {option}\r\n                            </button>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"chat-input\">\r\n                        <input type=\"text\" value={input} onChange={(e) => setInput(e.target.value)} onKeyPress={handleKeyPress} placeholder=\"Ask me about health...\" />\r\n                        <button onClick={sendMessage}>➤</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}